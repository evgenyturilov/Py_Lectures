# Функция map() применяет указанную функцию к каждому элементу итерируемого объекта и возвращает итератор с новыми объектами. НЕЛЬЗЯ ПРОЙТИСЬ ДВАЖДЫ!!!

li = [x for x in range(1,20)]
print(li)

li = list(map(lambda x: x+ 10, li))
print(li)

data = list(map(int, '1 2 3'.split()))
print(data)

# Решение предыдущей задачи при помощи функции map(). См. lambda_+_list_comprehention.py

def select(f, col):                         # Функция, которая в качестве переменных принимает какую-либо функцию и какие-либо данные
    return [f(x) for x in col]

def where(f, col):                          # Функция. которая содержит условие сортировки
    return [x for x in col if f(x)]

data = '1 2 3 5 8 15 23 38'.split()         # Поскольку результатом чтения данных из файлов является строка, то используем split() для разделения строки (в качестве делителя по умолчанию ' ')

res = map(int, data)                        # Используем встроенную функцию map() взамен нашей функции select для преобразования раделенных строковых значений в целочисленные
res = where(lambda x: not x % 2, res)       # Полученный список целочисленных значений из предыдущих вычислений сортируется по признаку четности (здесь not x % 2 -> False, т.е 0, т.е. признак четности )
res = list(map(lambda x: (x, x**2), res))   # Опять используем встроенную функцию map() для формирования списка кортежей. Чтобы сохранить результат работы итератора map(), используем приведение результат ак списку посредством функции list()

print(res)                                  # Для замены нашей функции where в python также используется встроенный функционал в виде функции filter()    