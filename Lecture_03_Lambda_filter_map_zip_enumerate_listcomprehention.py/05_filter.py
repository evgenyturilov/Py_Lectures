# Функция filter() применяет указанную функцию к каждому элементу итерируемого объекта и возвращает итератор с теми объектами, для которых функция вернула True/
# !!!НЕЛЬЗЯ ПРОЙТИСЬ ДВАЖДЫ!!!

data = [x for x in range(10)]

res = list(filter(lambda x: not x%2, data))
print(res)




# Продолжение решения предыдущей задачи при помощи функции filter(). См. lambda_+_list_comprehention.py & map.py

def select(f, col):                         # Функция, которая в качестве переменных принимает какую-либо функцию и какие-либо данные
    return [f(x) for x in col]

def where(f, col):                          # Функция. которая содержит условие сортировки
    return [x for x in col if f(x)]

data = '1 2 3 5 8 15 23 38'.split()         # Поскольку результатом чтения данных из файлов является строка, то используем split() для разделения строки (в качестве делителя по умолчанию ' ')

res = map(int, data)                        # Используем встроенную функцию map() взамен нашей функции select для преобразования раделенных строковых значений в целочисленные
res = filter(lambda x: not x % 2, res)      # Полученный список целочисленных значений из предыдущих вычислений сортируется по признаку четности (здесь not x % 2 -> False, т.е 0, т.е. признак четности )
res = list(map(lambda x: (x, x**2), res))   # Опять используем встроенную функцию map() для формирования списка кортежей. Чтобы сохранить результат работы итератора map(), используем приведение результат ак списку посредством функции list()

print(res)                                     